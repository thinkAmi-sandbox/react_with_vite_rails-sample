/* tslint:disable */
/* eslint-disable */
/**
 * React With Vite Rails API
 * react_with_vite_rails リポジトリのAPIスキーマです
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Fruit
 */
export interface Fruit {
    /**
     * 
     * @type {number}
     * @memberof Fruit
     */
    'id'?: number;
    /**
     * 果物の名前
     * @type {string}
     * @memberof Fruit
     */
    'name'?: string;
}
/**
 * 果物名を配列で返す時のレスポンス型 
 * @export
 * @interface FruitsResponse
 */
export interface FruitsResponse {
    /**
     * 
     * @type {Array<Fruit>}
     * @memberof FruitsResponse
     */
    'fruits': Array<Fruit>;
}

/**
 * ArrayInQueryParamsApi - axios parameter creator
 * @export
 */
export const ArrayInQueryParamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Arrayをクエリ文字列に入れてリクエストするAPI 
         * @param {Array<string>} [names] 果物の名前のリスト 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArrayInQueryParamsFruits: async (names?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/array_in_query_params/fruits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names) {
                localVarQueryParameter['names[]'] = names;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArrayInQueryParamsApi - functional programming interface
 * @export
 */
export const ArrayInQueryParamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArrayInQueryParamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Arrayをクエリ文字列に入れてリクエストするAPI 
         * @param {Array<string>} [names] 果物の名前のリスト 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchArrayInQueryParamsFruits(names?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FruitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchArrayInQueryParamsFruits(names, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArrayInQueryParamsApi - factory interface
 * @export
 */
export const ArrayInQueryParamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArrayInQueryParamsApiFp(configuration)
    return {
        /**
         * 
         * @summary Arrayをクエリ文字列に入れてリクエストするAPI 
         * @param {Array<string>} [names] 果物の名前のリスト 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArrayInQueryParamsFruits(names?: Array<string>, options?: any): AxiosPromise<FruitsResponse> {
            return localVarFp.fetchArrayInQueryParamsFruits(names, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArrayInQueryParamsApi - object-oriented interface
 * @export
 * @class ArrayInQueryParamsApi
 * @extends {BaseAPI}
 */
export class ArrayInQueryParamsApi extends BaseAPI {
    /**
     * 
     * @summary Arrayをクエリ文字列に入れてリクエストするAPI 
     * @param {Array<string>} [names] 果物の名前のリスト 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayInQueryParamsApi
     */
    public fetchArrayInQueryParamsFruits(names?: Array<string>, options?: AxiosRequestConfig) {
        return ArrayInQueryParamsApiFp(this.configuration).fetchArrayInQueryParamsFruits(names, options).then((request) => request(this.axios, this.basePath));
    }
}


